buildscript {
    ext {
        apacheGroovyVersion = '3.0.8'
        spockVersion = '2.0-groovy-3.0'
        jacksonVersion = '2.11.1'
        lombokVersion = '1.18.20'
        springBootVersion = '2.5.2'
        springDependencyManagementVersion = '1.0.11.RELEASE'
        springFoxStarterVersion = '3.0.0'
        springFoxUiVersion = '3.0.0'
        postgresqlVersion = '42.2.19'
        flywayVersion = '7.12.0'
        h2databaseVersion = '1.4.200'
        mongoVersion = '3.12.8'
    }
}

plugins {
    id 'checkstyle'
    id 'groovy'
    id 'jacoco'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

dependencies {

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    runtimeOnly( "org.postgresql:postgresql:${postgresqlVersion}",
                 "com.h2database:h2:${h2databaseVersion}"
    )

    implementation(

            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-jdbc',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'com.google.guava:guava:30.0-jre',
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}",
            "io.springfox:springfox-boot-starter:${springFoxStarterVersion}",
            "io.springfox:springfox-swagger-ui:${springFoxUiVersion}",
            "org.flywaydb:flyway-core:${flywayVersion}",
            "org.mongodb:mongo-java-driver:${mongoVersion}"
    )

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            "org.codehaus.groovy:groovy:${apacheGroovyVersion}",
            "org.spockframework:spock-core:${spockVersion}",
            "org.spockframework:spock-spring:${spockVersion}"
    )
}

jacoco {
    toolVersion = "0.8.6"
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }

        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['pl/futurecollars/invoicing/InvoiceApplication.class',
                                        'pl/futurecollars/invoicing/db/DatabaseConfiguration.class'])
        }))
    }
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

task testWithFileDatabase (type: Test) {
    group 'verification'
    description 'Run tests using File Based Database'
    systemProperty 'spring.profiles.active', 'file'
}

task testWithMemoryDatabase(type: Test) {
    group 'verification'
    description 'Run tests using In Memory Database'
    systemProperty 'spring.profiles.active', 'memory'
}

task testWithPostgresSqlDatabase(type: Test) {
    group 'verification'
    description 'Run tests using Postgres SQL Database'
    systemProperty 'spring.profiles.active', 'sql-pg'
}

task testWithSqlDatabase(type: Test) {
    group 'verification'
    description 'Run tests using H2 SQL Database'
    systemProperty 'spring.profiles.active', 'sql'
}

task testWithJpaDatabase(type: Test) {
    group 'verification'
    description 'Run tests using H2 JPA Database'
    systemProperty 'spring.profiles.active', 'jpa'
}

task testWithJpaFlywayDatabase(type: Test) {
    group 'verification'
    description 'Run tests using H2 JPA Flyway Database'
    systemProperty 'spring.profiles.active', 'jpa-flyway'
}

task testWithMongoDatabase(type: Test) {
    group 'verification'
    description 'Run tests using Mongo Database'
    systemProperty 'spring.profiles.active', 'mongo'
}

check.dependsOn testWithFileDatabase
check.dependsOn testWithMemoryDatabase
check.dependsOn testWithSqlDatabase
check.dependsOn testWithJpaDatabase
check.dependsOn testWithJpaFlywayDatabase
check.dependsOn testWithMongoDatabase

String osName = System.getProperty("os.name").toLowerCase()
if (osName.contains("windows")) {
    check.dependsOn testWithPostgresSqlDatabase
}