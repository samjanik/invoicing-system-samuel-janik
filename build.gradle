buildscript {
    ext {
        apacheGroovyVersion = '3.0.8'
        spockVersion = '2.0-groovy-3.0'
        jacksonVersion = '2.11.1'
        lombokVersion = '1.18.20'
        springBootVersion = '2.5.2'
        springDependencyManagementVersion = '1.0.11.RELEASE'
    }
}

plugins {
    id 'checkstyle'
    id 'groovy'
    id 'jacoco'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

dependencies {

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation(

            'org.springframework.boot:spring-boot-starter-web',
            'com.google.guava:guava:30.0-jre',
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    )

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            "org.codehaus.groovy:groovy:${apacheGroovyVersion}",
            "org.spockframework:spock-core:${spockVersion}",
            "org.spockframework:spock-spring:${spockVersion}"
    )
}

jacoco {
    toolVersion = "0.8.6"
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }

        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['pl/futurecollars/invoicing/InvoiceApplication.class',
                                        'pl/futurecollars/invoicing/db/DatabaseConfiguration.class'])
        }))
    }
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}
